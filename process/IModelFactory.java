
package process;

/**
 * Інтерфейс визначає технологію створення моделі, яка передбачає, що існує
 * об'єкт, який створює моделі за допомогою фабрики(об'єкту, що реалізує цей
 * інтерфейс), та працює з ними, і у цьому об'єкті визначений об'єкт класу
 * process.Dispatcher, під керівництвом якого має працювати модель.
 * 
 * Моделі створюються за допомогою методу createModel(Dispatcher), через який
 * моделям передається посилання на диспетчера.
 * 
 * Сам інтерфейс доцільно реалізувати у класі, що відповідає за налаштування
 * моделі, і в реалізації методу createModel(Dispatcher) передбачити передачу
 * моделі посилання на цей клас, через відповідний конструктор, завдяки чому
 * модель може отримати усі необхідні налаштування.
 * 
 * Модель доцільно створювати перед кожним пуском, а не використовувати
 * повторно.
 * 
 * Технологія передбачає, що виклик методу createModel(Dispatcher) гарантує
 * готовність моделі до запуску одразу після створення за допомогою метода
 * диспетчера start(). Але не виключається, що перед стартом диспетчера, в
 * залежності від режиму роботи моделі, може виконуватися додаткова
 * ініціалізація моделі.
 * 
 * Для того, щоб модель була готова до запуску одразу після створення можна
 * рекомендувати у конструкторі моделі викликати метод componentsToStartList().
 * Завдання цього методу - передати активні компоненти моделі(об'єкти
 * спадкоємців класу process.Actor) до стартового списку диспетчера. До усіх
 * компонентів моделі доцільно звертатися через методи get... із перевіркою на
 * null (тобто використовувати технологію відкладеного створення об'єктів. Таким
 * чином після виклику конструктора моделі послідовно будуть створені усі
 * необхідні об'єкти.
 * 
 * Для реалізації спадкоємців класу process.Actor можна рекомендовати
 * використовувати внутрішні класи, що спрощує їх реалізацію.
 * 
 */
public interface IModelFactory {

	/**
	 * Метод має бути реалізований у фабриці моделей. Його завдання - створити
	 * нову модель. Як параметри до методу передається диспетчер, під чиїм
	 * керівництвом модель буде працювати і якому мають бути передані усі актори
	 * моделі.
	 */
	public Object createModel(Dispatcher dispatcher);

}
